@implements IDisposable

<style>
    .rotate {
        transform-origin: 26px 0;
        transform: rotate(90deg);
    }
    .panel {
        max-width: 500px;
        margin-top: 20px;
        margin-left: auto;
        margin-right: auto;
        background-color: gray;
        padding: 10px;
        border-radius: 6px
    }
    .item {
        max-width: 30px;
        background-color: gainsboro;
        padding-bottom: 2px;
        border-radius: 3px
    }
    .text-item {
        padding-left: 30px;
        height: 100px;
        font-weight: bold;
        color: gray;
    }
    .btext-item {
        padding-left: 30px;
        height: 70px;
        font-weight: bold;
        color: gray;
    }
    .led-item {
        color: darkslategray;
        padding-left: 7px;
        height: 25px;
    }
    .led-green {
        color: #38b000;
        text-shadow: 0 0 6px #38b000;
    }
    .led-red {
        color: red;
        text-shadow: 0 0 6px red;
    }
    .button-item {
        height: 30px;
    }
    .button {
        height: 24px;
        margin-left: auto;
        margin-right: auto;
    }
    .blink {
        animation: blink-animation 1s infinite;
        -webkit-animation: blink-animation 1s infinite;
    }
    @@keyframes blink-animation {
        0% {
            color: darkslategray;
            text-shadow: none;
        }

        49% {
            color: darkslategray;
            text-shadow: none;
        }

        50% {
            color: #38b000;
            text-shadow: 0 0 6px #38b000;
        }

        99% {
            color: #38b000;
            text-shadow: 0 0 6px #38b000;
        }
    }
    @@-webkit-keyframes blink-animation {
        0% {
            color: darkslategray;
            text-shadow: none;
        }

        49% {
            color: darkslategray;
            text-shadow: none;
        }

        50% {
            color: #38b000;
            text-shadow: 0 0 6px #38b000;
        }

        99% {
            color: #38b000;
            text-shadow: 0 0 6px #38b000;
        }
    }
    .info-table {
        max-width: 900px;
    }
</style>
<div class="info-table">
    <div class="row">
        <div class="col-sm-3"><b>Funkce</b></div>
        <div class="col-sm-1"><b>Zdroj</b></div>
        <div class="col-sm-3"><b>Poslední změna</b></div>
        <div class="col-sm-3"><b>Od poslední změny</b></div>
    </div>
    <div class="row">
        <div class="col-sm-3">Přepínače stavů</div>
        <div class="col-sm-1">
            <div class="badge badge-info">@(_fnItems.Source == Data.TransferData.SourceEnum.Arduino ? "PANEL" : "SERVER")</div>
        </div>
        <div class="col-sm-3">
            <div class="badge badge-info">@($"{_fnItems.Date:G}")</div>
        </div>
        <div class="col-sm-3">
            <div class="badge badge-info">@($"{_fnItemsFromLastChange}")</div>
        </div>
        <div class="col-sm-1">
            <button class="btn btn-danger btn-sm" @onclick="() => ResetFnItems()" disabled="@(_cmdItems.Source == Data.TransferData.SourceEnum.Arduino)">reset</button>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">Příkazy</div>
        <div class="col-sm-1">
            <div class="badge badge-info">@(_cmdItems.Source == Data.TransferData.SourceEnum.Arduino ? "PANEL" : "SERVER")</div>
        </div>
        <div class="col-sm-3">
            <div class="badge badge-info">@($"{_cmdItems.Date:G}")</div>
        </div>
        <div class="col-sm-3">
            <div class="badge badge-info">@($"{_cmdItemsFromLastChange}")</div>
        </div>
        <div class="col-sm-1">
            <button class="btn btn-danger btn-sm" @onclick="() => ResetCmdItems()" disabled="@(_cmdItems.Source == Data.TransferData.SourceEnum.Arduino)">reset</button>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between panel">
    <div class="item">
        <div class="rotate text-item">
            Alarm
        </div>
        <div class="led-item">
            <i class="fas fa-circle"></i>
        </div>
        <div class="led-item">

        </div>
        <div class="rotate text-item">

        </div>
        <div class="led-item @GetStatusClass(Data.TransferData.ButtonPressEnum.Alarm)">
            <i class="fas fa-circle"></i>
        </div>
        <div class="d-flex button-item">
            <button class="btn btn-primary button" @onclick="() => StatusButtonClicked(Data.TransferData.ButtonPressEnum.Alarm)"></button>
        </div>
        <div class="led-item">

        </div>
        <div class="d-flex">
            <button class="btn @GetCmdClass(Data.TransferData.ButtonPressEnum.AlarmOff) button" @onclick="() => CmdButtonClicked(Data.TransferData.ButtonPressEnum.AlarmOff)"></button>
        </div>
        <div class="led-item">

        </div>
        <div class="rotate btext-item">
            ALARM
        </div>
    </div>
    <div class="item">
        <div class="rotate text-item">
            Kamery
        </div>
        <div class="led-item">
            <i class="fas fa-circle"></i>
        </div>
        <div class="led-item">

        </div>
        <div class="rotate text-item">

        </div>
        <div class="led-item @GetStatusClass(Data.TransferData.ButtonPressEnum.Cams)">
            <i class="fas fa-circle"></i>
        </div>
        <div class="d-flex button-item">
            <button class="btn btn-primary button" @onclick="() => StatusButtonClicked(Data.TransferData.ButtonPressEnum.Cams)"></button>
        </div>
    </div>
    <div class="item">
        <div class="rotate text-item">
            Voda
        </div>
        <div class="led-item">
            <i class="fas fa-circle"></i>
        </div>
        <div class="led-item">

        </div>
        <div class="rotate text-item">

        </div>
        <div class="led-item @GetStatusClass(Data.TransferData.ButtonPressEnum.Water)">
            <i class="fas fa-circle"></i>
        </div>
        <div class="d-flex button-item">
            <button class="btn btn-primary button" @onclick="() => StatusButtonClicked(Data.TransferData.ButtonPressEnum.Water)"></button>
        </div>
    </div>
    <div class="item">
        <div class="rotate text-item">
            Krb
        </div>
        <div class="led-item">
            <i class="fas fa-circle"></i>
        </div>
        <div class="led-item led-red">
            <i class="fas fa-circle"></i>
        </div>
        <div class="rotate text-item">
            Akumulace
        </div>
    </div>
    <div class="item">
        <div class="rotate text-item">
            ElKotel
        </div>
        <div class="led-item">
            <i class="fas fa-circle"></i>
        </div>
        <div class="led-item">

        </div>
        <div class="rotate text-item">

        </div>
        <div class="led-item @GetStatusClass(Data.TransferData.ButtonPressEnum.ElHeating)">
            <i class="fas fa-circle"></i>
        </div>
        <div class="d-flex button-item">
            <button class="btn btn-primary button" @onclick="() => StatusButtonClicked(Data.TransferData.ButtonPressEnum.ElHeating)"></button>
        </div>
        <div class="led-item">

        </div>
        <div class="d-flex">
            <button class="btn @GetCmdClass(Data.TransferData.ButtonPressEnum.WIFI) button" @onclick="() => CmdButtonClicked(Data.TransferData.ButtonPressEnum.WIFI)"></button>
        </div>
        <div class="led-item">

        </div>
        <div class="rotate btext-item">
            WIFI
        </div>
    </div>
    <div class="item">
        <div class="rotate text-item">
            Termostat&nbsp;2
        </div>
        <div class="led-item">
            <i class="fas fa-circle"></i>
        </div>
        <div class="led-item">

        </div>
        <div class="rotate text-item">

        </div>
        <div class="led-item @GetStatusClass(Data.TransferData.ButtonPressEnum.Termostat2)">
            <i class="fas fa-circle"></i>
        </div>
        <div class="d-flex button-item">
            <button class="btn btn-primary button" @onclick="() => StatusButtonClicked(Data.TransferData.ButtonPressEnum.Termostat2)"></button>
        </div>
        <div class="led-item">

        </div>
        <div class="d-flex">
            <button class="btn @GetCmdClass(Data.TransferData.ButtonPressEnum.GSM) button" @onclick="() => CmdButtonClicked(Data.TransferData.ButtonPressEnum.GSM)"></button>
        </div>
        <div class="led-item">

        </div>
        <div class="rotate btext-item">
            GSM
        </div>
    </div>
    <div class="item">
        <div class="rotate text-item">
            Termostat&nbsp;1
        </div>
        <div class="led-item">
            <i class="fas fa-circle"></i>
        </div>
        <div class="led-item">

        </div>
        <div class="rotate text-item">

        </div>
        <div class="led-item @GetStatusClass(Data.TransferData.ButtonPressEnum.Termostat1)">
            <i class="fas fa-circle"></i>
        </div>
        <div class="d-flex button-item">
            <button class="btn btn-primary button" @onclick="() => StatusButtonClicked(Data.TransferData.ButtonPressEnum.Termostat1)"></button>
        </div>
    </div>
</div>

@code {
    [Inject]
    public Data.DataStorage DataStorage { get; set; }

    [Inject]
    public Data.ChangeNotifier ChangeNotifier { get; set; }

    [Inject]
    public Data.Errors Errors { get; set; }

    Data.TransferData.FnItems _fnItems = new Data.TransferData.FnItems();
    Data.TransferData.CmdItems _cmdItems = new Data.TransferData.CmdItems();
    string _fnItemsFromLastChange;
    string _cmdItemsFromLastChange;
    bool _disposed;

    protected override void OnInitialized()
    {
        ChangeNotifier.Notify += OnNotify;

        var fnItems = DataStorage.GetData<Data.TransferData.FnItems>();
        if (fnItems == null)
        {
            _fnItems = new Data.TransferData.FnItems();
            _fnItems.Reset();
        }
        else
        {
            _fnItems = fnItems;
        }

        var cmdItems = DataStorage.GetData<Data.TransferData.CmdItems>();
        if (cmdItems == null)
        {
            _cmdItems = new Data.TransferData.CmdItems();
        }
        else
        {
            _cmdItems = cmdItems;
        }

        DataLoop();
    }

    public void Dispose()
    {
        ChangeNotifier.Notify -= OnNotify;
        _disposed = true;
    }

    async void DataLoop()
    {
        await Task.Yield();
        do
        {
            await Task.Delay(500);

            _fnItemsFromLastChange = _fnItems.Date == DateTime.MinValue ? null : (DateTime.Now - _fnItems.Date).ToString();
            _cmdItemsFromLastChange = _cmdItems.Date == DateTime.MinValue ? null : (DateTime.Now - _cmdItems.Date).ToString();
            await InvokeAsync(StateHasChanged);
        }
        while (!_disposed);
    }

    string GetStatusClass(Data.TransferData.ButtonPressEnum buttonPress)
    {
        var state = _fnItems.GetState(buttonPress);
        switch (state)
        {
            case Data.TransferData.FnStateEnum.Off: return "";
            case Data.TransferData.FnStateEnum.Auto: return "led-green";
            case Data.TransferData.FnStateEnum.On: return "led-green blink";
            default: throw new NotImplementedException();
        }
    }

    void StatusButtonClicked(Data.TransferData.ButtonPressEnum buttonPress)
    {
        _fnItems.SwitchItem(buttonPress);
        DataStorage.SaveData(_fnItems);
    }

    string GetCmdClass(Data.TransferData.ButtonPressEnum buttonPress)
    {
        var pressed = _cmdItems.GetPressed(buttonPress);
        if (pressed)
            return "btn-warning";

        switch (buttonPress)
        {
            case Data.TransferData.ButtonPressEnum.GSM:
            case Data.TransferData.ButtonPressEnum.WIFI:
                return "btn-success";
            case Data.TransferData.ButtonPressEnum.AlarmOff:
                return "btn-danger";
            default:
                throw new NotImplementedException();
        }
    }

    void CmdButtonClicked(Data.TransferData.ButtonPressEnum buttonPress)
    {
        _cmdItems.SetPressed(buttonPress, true);
        DataStorage.SaveData(_cmdItems);
    }

    void ResetFnItems()
    {
        _fnItems.Reset();
        DataStorage.SaveData(_fnItems);
    }

    void ResetCmdItems()
    {
        _cmdItems.Reset();
        DataStorage.SaveData(_cmdItems);
    }

    async void OnNotify(object sender, object item)
    {
        try
        {
            await Task.Delay(5000);
            if (item is Data.DataChangedArgs)
            {
                _fnItems = (item as Data.DataChangedArgs).FnItems;
                _cmdItems = (item as Data.DataChangedArgs).CmdItems;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Errors.ErrorList.Add(new Data.ErrorModel(ex.ToString()));
        }
    }
}
