@page "/servis"
@using V.Server.Data

<h3>Servis</h3>

<div class="d-flex col-lg-6">
    <input class="form-control" type="text" @bind-value="@_recoveryStr" />
    <button class="btn btn-primary col-4" @onclick="@(() => SetRecoveryStatus())">Nastavit</button>
</div>
<div class="d-flex col-lg-6 mt-2">
    <input class="form-control" type="text" @bind-value="@_smsMessage" />
    <button class="btn btn-primary col-4" @onclick="@(() => SendSMS())">Poslat SMS</button>
</div>
<div class="d-flex col-lg-6 mt-2">
    <input class="my-auto mr-1" type="checkbox" @bind="@ChangeNotifier.WatchDogEnabled" />
    <div class="my-auto">WatchDog zapnutý</div>
</div>
@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert-danger">@_error</div>
}

@code {
    [Inject]
    DataStorage DataStorage { get; set; }

    [Inject]
    Services.SMSHttpClient SMSHttpClient { get; set; }

    [Inject]
    ChangeNotifier ChangeNotifier { get; set; }

    string _recoveryStr { get; set; }
    string _smsMessage { get; set; }
    string _error;

    protected override void OnInitialized()
    {
        LoadRecoveryStatus();
    }

    void LoadRecoveryStatus()
    {
        try
        {
            var fnRecovery = DataStorage.GetData<TransferData.FnItems>("FnRecovery");
            if (fnRecovery == null)
            {
                _recoveryStr = "{1|1|1|1|1|1}";
                return;
            }

            var items = new List<string>();
            items.Add(((byte)fnRecovery.GetState(TransferData.ButtonPressEnum.Termostat1)).ToString());
            items.Add(((byte)fnRecovery.GetState(TransferData.ButtonPressEnum.Termostat2)).ToString());
            items.Add(((byte)fnRecovery.GetState(TransferData.ButtonPressEnum.ElHeating)).ToString());
            items.Add(((byte)fnRecovery.GetState(TransferData.ButtonPressEnum.Water)).ToString());
            items.Add(((byte)fnRecovery.GetState(TransferData.ButtonPressEnum.Cams)).ToString());
            items.Add(((byte)fnRecovery.GetState(TransferData.ButtonPressEnum.Alarm)).ToString());

            _recoveryStr = string.Join('|', items);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            StateHasChanged();
        }
    }

    void SetRecoveryStatus()
    {
        _error = null;
        try
        {
            var items = _recoveryStr.Split('|');
            var fnItems = new TransferData.FnItems();

            ProcessState(items[0], TransferData.ButtonPressEnum.Termostat1, fnItems);
            ProcessState(items[1], TransferData.ButtonPressEnum.Termostat2, fnItems);
            ProcessState(items[2], TransferData.ButtonPressEnum.ElHeating, fnItems);
            ProcessState(items[3], TransferData.ButtonPressEnum.Water, fnItems);
            ProcessState(items[4], TransferData.ButtonPressEnum.Cams, fnItems);
            ProcessState(items[5], TransferData.ButtonPressEnum.Alarm, fnItems);

            fnItems.Source = TransferData.SourceEnum.Arduino;
            fnItems.Date = DateTime.Now;
            DataStorage.SaveData(fnItems, "FnRecovery");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        StateHasChanged();
    }

    private void ProcessState(string value, TransferData.ButtonPressEnum buttonPress, TransferData.FnItems fnItems)
    {
        if (byte.TryParse(value, out byte iState))
        {
            fnItems.SetState(buttonPress, (TransferData.FnStateEnum)iState);
        }
    }

    async Task SendSMS()
    {
        _error = null;
        Action<string> onError = async (msg) =>
        {
            _error = msg;
            await InvokeAsync(StateHasChanged);
        };
        await SMSHttpClient.SendSMS(_smsMessage, onError);
    }
}